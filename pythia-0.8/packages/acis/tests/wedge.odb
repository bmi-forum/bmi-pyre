#!/usr/bin/env python
# 
#  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
#                               Michael A.G. Aivazis
#                        California Institute of Technology
#                        (C) 1998-2005 All Rights Reserved
# 
#  <LicenseText>
# 
#  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 


def modeller():

    # model
    from pyre.geometry.GeometricalModeller import GeometricalModeller

    class Wedge(GeometricalModeller):

        class Inventory(GeometricalModeller.Inventory):

            import pyre.inventory
            from pyre.units.length import meter

            scale = pyre.inventory.float("scale", default=2)
            length = pyre.inventory.dimensional("length", default=0.1 * meter)
            radius = pyre.inventory.dimensional("radius", default=0.05 * meter)
            wallThickness = pyre.inventory.dimensional("wall-thickness", default=0.005 * meter)
            gapDepth = pyre.inventory.dimensional("gap-depth", default=0.02 * meter)
            gapThickness = pyre.inventory.dimensional("gap-thickness", default=0.01 * meter)
            targetLength = pyre.inventory.dimensional("target-length", default=0.07 * meter)


        def model(self):

            from math import pi
            from pyre.units.length import cm
            from pyre.geometry.solids import cylinder, cone
            from pyre.geometry.operations import subtract, unite, translate

            scale = self.inventory.scale
            length = self.inventory.length
            radius = self.inventory.radius
            wallThickness = self.inventory.wallThickness
            gapDepth = self.inventory.gapDepth
            gapThickness = self.inventory.gapThickness
            targetLength = self.inventory.targetLength

            ils = length.value/scale 

            body = cylinder(radius=radius+wallThickness, height=length+wallThickness)
            bore = cylinder(radius=radius, height=length)
            body = subtract(body, bore)

            target = cylinder(radius=radius-wallThickness-gapThickness, height=targetLength)
            wedge = cone(top=0*cm, bottom=radius-wallThickness-gapThickness, height=targetLength)
            target = subtract(target, wedge)

            target = translate(target, (0.0 * cm, 0.0 * cm, length - targetLength)) 
            body = unite(body, target)

            return body


        def __init__(self):
            GeometricalModeller.__init__(self, "wedge")
            return


    import journal
    info = journal.debug("geometry")
    info.log("instantiating geometry")

    wedge = Wedge()

    info.log("geometry: %r" % wedge.name)

    return wedge
    

# version
__id__ = "$Id: wedge.odb,v 1.1.1.1 2005/03/08 16:13:33 aivazis Exp $"

#  End of file 
